commands:
    check-authentication:
        description: |
            Verifies the Heroku API key has been added so we can authenticate.
        parameters:
            print-whoami:
                default: false
                description: Print the result of heroku auth:whoami.
                type: boolean
        steps:
            - run:
                command: |
                    if [[ $HEROKU_API_KEY == "" ]]; then
                      echo "No Heroku API key set, please set the HEROKU_API_KEY environment variable."
                      echo "This can be found by running the `heroku auth:token` command locally."
                      exit 1
                    else
                      echo "Heroku API key found."
                    <<#parameters.print-whoami>>
                      heroku auth:whoami
                    <</parameters.print-whoami>>
                    fi
                name: Verify HEROKU_API_KEY is set
    deploy-via-git:
        description: |
            Replace this text with a description for this command. # What will this command do? # Descriptions should be short, simple, and clear.
        parameters:
            api-key:
                default: HEROKU_API_KEY
                description: The name of the environment variable containing your Heroku API Key.
                type: env_var_name
            app-name:
                default: $HEROKU_APP_NAME
                description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
                type: string
            branch:
                default: $CIRCLE_BRANCH
                description: Deploy the given branch. The default value is your current branch.
                type: string
            force:
                default: false
                description: Whether or not to force the git push (i.e. `git push -f`). Defaults to false.
                type: boolean
            maintenance-mode:
                default: false
                description: Use this to automatically enable maintenance mode before pre-deploy steps and have it disabled after post-deploy steps have been run.
                type: boolean
            no_output_timeout:
                default: 10m
                description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
                type: string
            tag:
                default: $CIRCLE_TAG
                description: Deploy the given tag. The default value is your current tag.
                type: string
        steps:
            - when:
                condition: << parameters.maintenance-mode >>
                steps:
                    - run:
                        command: heroku maintenance:on --app << parameters.app-name >>
                        name: Turn ON maintenance mode.
            - run:
                command: |
                    if << parameters.force >>;then
                      force="-f"
                    fi

                    heroku_url="https://git.heroku.com/quiet-mountain-30609.git"

                    if [ -n "<< parameters.branch >>" ]; then
                      git push $force $heroku_url << parameters.branch >>:main
                    elif [ -n "<< parameters.tag >>" ]; then
                      git push $force $heroku_url << parameters.tag >>^{}:main
                    else
                      echo "No branch or tag found."
                      exit 1
                    fi
                name: Deploy branch or tag to Heroku via git push
                no_output_timeout: << parameters.no_output_timeout >>
            - when:
                condition: << parameters.maintenance-mode >>
                steps:
                    - run:
                        command: heroku maintenance:off --app << parameters.app-name >>
                        name: Turn OFF maintenance mode.
    install:
        description: |
            Download and install the Heroku CLI. Will be skipped if the CLI is already installed in the system.
        steps:
            - run:
                command: |
                    if [[ $(command -v heroku) == "" ]]; then
                      curl https://cli-assets.heroku.com/install.sh | sh
                    else
                      echo "Heroku is already installed. No operation was performed."
                    fi
                name: Install Heroku CLI (If not installed)
    push-docker-image:
        description: |
            Push a Docker image to the Heroku Docker registry.
        parameters:
            api-key:
                default: HEROKU_API_KEY
                description: The name of the environment variable containing your Heroku API Key.
                type: env_var_name
            app-name:
                default: $HEROKU_APP_NAME
                description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
                type: string
            no_output_timeout:
                default: 10m
                description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
                type: string
            process-types:
                default: ""
                description: Process types.
                type: string
            recursive:
                default: false
                description: Push all Dockerfiles in the directory to Heroku.
                type: boolean
        steps:
            - run:
                command: heroku container:login
                name: Login to Heroku Docker image registry
            - run:
                command: |
                    heroku container:push -a <<parameters.app-name>> \
                    <<# parameters.recursive >>--recursive<</ parameters.recursive >>
                    <<# parameters.process-types>><<parameters.process-types>><</ parameters.process-types>>
                name: Push Docker image to Heroku
                no_output_timeout: << parameters.no_output_timeout >>
    release-docker-image:
        description: |
            Release a Docker image from the Heroku Docker registry.
        parameters:
            api-key:
                default: HEROKU_API_KEY
                description: The name of the environment variable containing your Heroku API Key.
                type: env_var_name
            app-name:
                default: $HEROKU_APP_NAME
                description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
                type: string
            no_output_timeout:
                default: 10m
                description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
                type: string
            process-types:
                default: web
                description: Process types.
                type: string
        steps:
            - run:
                command: heroku container:login
                name: Login to Heroku Docker image registry
            - run:
                command: |
                    heroku container:release -a <<parameters.app-name>> \
                    <<parameters.process-types>>
                name: Push Docker image to Heroku
                no_output_timeout: << parameters.no_output_timeout >>
description: |
    Easily install and use the Heroku CLI with CircleCI to build, test, and deploy your applications to Heroku.
display:
    home_url: https://www.heroku.com/
    source_url: https://github.com/jayantmetacube/CircleCIGit
examples:
    use_heroku_commands:
        description: |
            'A simple example of a job utilizing the `install` and `deploy-via-git` commands.'
        usage:
            jobs:
                deploy:
                    executor: heroku/default
                    steps:
                        - checkout
                        - heroku/install
                        - run:
                            command: |
                                echo "The command above installs Heroku, the command below deploys. What you do inbetween is up to you!"
                        - heroku/deploy-via-git
            orbs:
                heroku: circleci/heroku@1.2.3
            version: 2.1
            workflows:
                heroku_deploy:
                    jobs:
                        - deploy
    use_heroku_job:
        description: |
            Easily deploy to Heroku with a single job supplied by this orb.
        usage:
            orbs:
                heroku: circleci/heroku@1.2.3
            version: 2.1
            workflows:
                heroku_deploy:
                    jobs:
                        - heroku/deploy-via-git:
                            post-steps:
                                - run: your-database-migration-command
                            pre-steps:
                                - run: command-that-run-before-deploying
executors:
    default:
        description: |
            A highly efficient and cached Ubuntu-based image. Consider using this executor or selecting an image for your language https://hub.docker.com/r/cimg/
        docker:
            - image: csanchez/maven
        parameters:
            tag:
                default: stable
                description: |
                    Pick a specific cimg/base tag: https://hub.docker.com/r/cimg/base/tags
                type: string
jobs:
  build:
    docker:
      - image: maven
    steps:
      - checkout
  test:
    docker:
      - image: maven
    steps:
      - checkout
      - run: mvn test
 
  deploy-via-git:
        description: |
            Quickly and easily take the changes to this branch or tag and deploy them to Heroku automatically with this job.
        executor: default
        parameters:
            app-name:
                default: $HEROKU_APP_NAME
                description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
                type: string
            maintenance-mode:
                default: false
                description: Use this to automatically enable mantainance mode before pre-deploy steps and have it disabled after post-deploy steps have been run.
                type: boolean
            post-deploy:
                default: []
                description: A list of post-deploy steps that are run after deployment. This would be an ideal place to scale any processes back up.
                type: steps
            pre-deploy:
                default: []
                description: A list of pre-deploy steps that are run before deployment. This would be an ideal place to scale any processes down.
                type: steps
        steps:
            - install
            - check-authentication
            - checkout
            - steps: << parameters.pre-deploy >>
            - deploy-via-git:
                app-name: << parameters.app-name >>
                maintenance-mode: << parameters.maintenance-mode >>
            - steps: << parameters.post-deploy >>
        push-docker-image:
        description: |
            Quickly and easily take the changes to this branch and deploy them to Heroku automatically with this job.
        executor: default
        parameters:
            app-name:
                default: $HEROKU_APP_NAME
                description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
                type: string
            maintenance-mode:
                default: false
                description: Use this to automatically enable mantainance mode before pre-deploy steps and have it disabled after post-deploy steps have been run.
                type: boolean
            post-deploy:
                default: []
                description: A list of post-deploy steps that are run after deployment. This would be an ideal place to scale any processes back up.
                type: steps
            pre-deploy:
                default: []
                description: A list of pre-deploy steps that are run before deployment. This would be an ideal place to scale any processes down.
                type: steps
        steps:
            - install
            - check-authentication
            - checkout
            - steps: << parameters.pre-deploy >>
            - push-docker-image:
                app-name: << parameters.app-name >>
                process-types: web
            - release-docker-image:
                app-name: << parameters.app-name >>
                process-types: web
workflows:
  maven_build :
    jobs:
       - build
       - test
       - deploy-via-git   
orbs:
maven: circleci/maven@1.0.2

version: 2.1